(defun dls (end path net depth)
  (cond ((eql (car path) end) path)
        ((> depth 0) (add-to-path end path net (1- depth)))
        (t nil)))

(defun add-to-path (end path net depth)
  (do ((locs (cddr (assoc (car path) net)) (cdr locs))
       (next-loc (car (cdr (assoc (car path) net))) (car locs)))
      ((null locs)
    (dls end (append (list next-loc) path) net depth))))

(defun ids (end queue net depth-limit)
  (do ((depth 1 (1+ depth))
       (path nil (dls end queue net depth)))
      ((or path (> depth depth-limit))
       path))) 

(defun shortest-path (start end net)
  (reverse (ids end (list start) net 10)))


;;redefined dfs 
(defun dfs (end path net depth)
  (cond 
   ((eql (car path) end) path)
   ((> depth 0)
    (do ((shortest nil (dfs end (cons (car locs) path) net (1- depth)))
         (locs (cdr (assoc (car path) net)) (cdr locs)))
        ((or (null locs) shortest) shortest)))
   (t nil)))
