(defun greater (x y)
  (cond ((> x y) x)
        (t y)))

(defun has-list-p (a)
  (cond ((null a) nil) 
        ((listp (car a)) t)
        (t (has-list-p (cdr a)))))

(defun print-dots (int)
  (when (> int 0) (format t ".") (print-dots (1- int))))

(defun print-dots (int)
  (do ((i 1 (1+ i)))
      ((> i int))
    (format t ".")))

(defun add-a (val)
  (cond ((eql val 'a) 1)
        (t 0)))

(defun get-a-count (lst)
  (do ((x lst (cdr x))
       (count 0 (+ count (add-a (car x)))))
      ((null x) count)))

(defun summit (lst)
  (if (null lst) 0
     (let ((x (car lst)))
           (if (null x)
               (summit (cdr lst))
             (+ x (summit (cdr lst)))))))
